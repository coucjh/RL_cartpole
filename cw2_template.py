# -*- coding: utf-8 -*-
"""CW2 Template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b4B21rnN5I63PN08aD1RSfxi482SLOAc
"""

import cv2
import pyglet
import IPython
import gym
import copy
from gym.wrappers.monitoring.video_recorder import VideoRecorder  # records videos of episodes
import numpy as np
import matplotlib.pyplot as plt  # Graphical library
import torch
import torch.optim as optim
import torch.nn as nn
import torch.nn.functional as F

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")  # Configuring Pytorch
from collections import namedtuple, deque
from itertools import count
import math
import random

# Test cell: check ai gym  environment + recording working as intended
from colabgymrender.recorder import Recorder  # Allow to record videos in Google Colab

# Recorder(gym.make("CartPole-v1"), './video')  # Defining the video recorder
# from gym.wrappers.monitoring.video_recorder import VideoRecorder
#
# env = gym.make("CartPole-v1")
# recorder = VideoRecorder(gym.make("CartPole-v1"), "video/video.mp4")
#
# observation = env.reset()
# terminal = False
# while not terminal:
#   recorder.capture_frame()
#   action = int(observation[2]>0)
#   observation, reward, terminal, info = env.step(action)
#   # Observation is position, velocity, angle, angular velocity
#
# recorder.close()
# env.close()

Transition = namedtuple('Transition',
                        ('state', 'action', 'next_state', 'reward'))

class ReplayBuffer(object):

    def __init__(self, capacity):
        self.memory = deque([],maxlen=capacity)

    def push(self, *args):
        """Save a transition"""
        self.memory.append(Transition(*args))

    def sample(self, batch_size):
        return random.sample(self.memory, batch_size)

    def __len__(self):
        return len(self.memory)

class DQN(nn.Module):

    def __init__(self, inputs, outputs, num_hidden, hidden_size):
        super(DQN, self).__init__()
        self.input_layer = nn.Linear(inputs, hidden_size)
        self.hidden_layers = nn.ModuleList([nn.Linear(hidden_size, hidden_size) for _ in range(num_hidden-1)])
        self.output_layer = nn.Linear(hidden_size, outputs)
    
    def forward(self, x):
        x.to(device)

        x = F.relu(self.input_layer(x))
        for layer in self.hidden_layers:
            x = F.relu(layer(x))
        
        return self.output_layer(x)

def optimize_model():
    if len(memory) < BATCH_SIZE:
        return
    transitions = memory.sample(BATCH_SIZE)
    # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for
    # detailed explanation). This converts batch-array of Transitions
    # to Transition of batch-arrays.
    batch = Transition(*zip(*transitions))

    # Compute a mask of non-final states and concatenate the batch elements
    # (a final state would've been the one after which simulation ended)
    non_final_mask = torch.tensor(tuple(map(lambda s: s is not None,
                                          batch.next_state)), device=device, dtype=torch.bool)
    

    # Can safely omit the condition below to check that not all states in the
    # sampled batch are terminal whenever the batch size is reasonable and
    # there is virtually no chance that all states in the sampled batch are 
    # terminal
    if sum(non_final_mask) > 0:
        non_final_next_states = torch.cat([s for s in batch.next_state
                                                    if s is not None])
    else:
        non_final_next_states = torch.empty(0,state_dim).to(device)

    state_batch = torch.cat(batch.state)
    action_batch = torch.cat(batch.action)
    reward_batch = torch.cat(batch.reward)

    # Compute Q(s_t, a) - the model computes Q(s_t), then we select the
    # columns of actions taken. These are the actions which would've been taken
    # for each batch state according to policy_net
    state_action_values = policy_net(state_batch).gather(1, action_batch)

    # Compute V(s_{t+1}) for all next states.
    # This is merged based on the mask, such that we'll have either the expected
    # state value or 0 in case the state was final.
    next_state_values = torch.zeros(BATCH_SIZE, device=device)
    
    with torch.no_grad():
        # Once again can omit the condition if batch size is large enough
        if sum(non_final_mask) > 0:
            next_state_values[non_final_mask] = policy_net(non_final_next_states).max(1)[0].detach()
        else:
            next_state_values = torch.zeros_like(next_state_values)

    # Compute the expected Q values
    expected_state_action_values = (next_state_values * GAMMA) + reward_batch

    # Compute loss
    loss = ((state_action_values - expected_state_action_values.unsqueeze(1))**2).sum()

    # Optimize the model
    optimizer.zero_grad()
    loss.backward()

    # Limit magnitude of gradient for update step
    for param in policy_net.parameters():
        param.grad.data.clamp_(-1, 1)

    optimizer.step()


def select_action(state, current_eps=0):

    sample = random.random()
    eps_threshold = current_eps
    if sample > eps_threshold:
        with torch.no_grad():
            # t.max(1) will return largest column value of each row.
            # second column on max result is index of where max element was
            # found, so we pick action with the larger expected reward.

            return policy_net(state).max(1)[1].view(1, 1)
    else:
        return torch.tensor([[random.randrange(n_actions)]], device=device, dtype=torch.long)


def plot_total_rewards(N_episodes, total_rewards):
    plt.figure(2)
    episodes = np.arange(N_episodes)
    plt.title('Training...')
    plt.xlabel('Episode')
    plt.ylabel('Total Rewards')
    plt.plot(episodes, np.array(total_rewards))

NUM_EPISODES = 1000
BATCH_SIZE = 100
GAMMA = 0.9
EPS_START = 0.9
EPS_END = 0.05
EPS_DECAY = 300

epsilon = EPS_START
num_hidden_layers = 1
size_hidden_layers = 10

# Get number of states and actions from gym action space
env = gym.make("CartPole-v1")
env.reset()
state_dim = len(env.state)    #x, x_dot, theta, theta_dot
n_actions = env.action_space.n
env.close()

policy_net = DQN(state_dim, n_actions, num_hidden_layers, size_hidden_layers).to(device)
                     
optimizer = optim.RMSprop(policy_net.parameters())
memory = ReplayBuffer(1000)

total_rewards = []

for i_episode in range(NUM_EPISODES):
    if i_episode % 20 == 0:
        print("episode ", i_episode, "/", NUM_EPISODES)

    # Initialize the environment and state
    env.reset()
    state = torch.tensor(env.state).float().unsqueeze(0).to(device)
    steps_done = 0
    total_reward = 0

    for t in count():
        # Select and perform an action
        epsilon = EPS_END + (EPS_START - EPS_END) * \
            math.exp(-1. * steps_done / EPS_DECAY)

        action = select_action(state, epsilon)
        _, reward, done, _ = env.step(action.item())
        reward = torch.tensor([reward], device=device)

        steps_done += 1
        # Observe new state
        if not done:
            next_state = torch.tensor(env.state).float().unsqueeze(0).to(device)
        else:
            next_state = None

        # Store the transition in memory    
        memory.push(state, action, next_state, reward)
        total_reward += reward.item()

        # Move to the next state
        state = next_state

        # Perform one step of the optimization (on the policy network)
        optimize_model()
        if done:
            break

    total_rewards.append(total_reward)

# plot_total_rewards(NUM_EPISODES, total_rewards)
print('Complete')

env.close()

plot_total_rewards(NUM_EPISODES, total_rewards)
plt.show()

## run an episode with trained agent and record video
## remember to change file_path name if you do not wish to overwrite an existing video

# env = gym.make("CartPole-v1")
# file_path = 'video/video.mp4'
# recorder = VideoRecorder(env, file_path)
#
# observation = env.reset()
# done = False
#
# state = state = torch.tensor(env.state).float().unsqueeze(0)
#
# duration = 0
#
# while not done:
#     recorder.capture_frame()
#
#     # Select and perform an action
#     action = select_action(state)
#     observation, reward, done, _ = env.step(action.item())
#     duration += 1
#     reward = torch.tensor([reward], device=device)
#
#     # Observe new state
#     state = torch.tensor(env.state).float().unsqueeze(0)
#
# recorder.close()
# env.close()
# print("Episode duration: ", duration)